{"version":3,"sources":["style/Stylesheet.module.css","components/HeaderComponent.jsx","components/FormComponent.jsx","components/TaskComponent.jsx","components/FooterComponent.jsx","components/MainComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Typography","align","display","variant","gutterBottom","FormComponent","state","text","onChangeTask","event","setState","target","value","onSubmitTask","preventDefault","props","onSubmit","id","Date","now","taskName","trim","isComplete","this","noValidate","autoComplete","className","styles","form_container","TextField","fullWidth","label","onChange","name","multiline","IconButton","onClick","color","disabled","React","Component","TaskComponent","buttonComponent","task","Fragment","Box","onDeleteButtonClicked","fontSize","onCompleteButtonClicked","task_list_row","p","m","flexGrow","task_text","FooterComponent","currentFilterButton","onButtonFilter","tasks","main_footer_container","total_count_container","length","filter_buttons_container","Button","size","MainComponent","selectedButton","isTaskPresent","addNewTask","newTask","checkDuplicateTaskName","onFilterButtonClicked","newSelectedButton","onTaskCompleted","map","onTaskDeleted","filter","newTaskName","isPresent","toLowerCase","taskList","error_message","key","errorMessage","footer","task_list_container","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dcaa2be7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form_container\":\"Stylesheet_form_container__YzFXm\",\"task_list_container\":\"Stylesheet_task_list_container__1p_Cg\",\"task_list_row\":\"Stylesheet_task_list_row__2LJK_\",\"task_text\":\"Stylesheet_task_text__2GV2w\",\"error_message\":\"Stylesheet_error_message__1fSUT\",\"main_footer_container\":\"Stylesheet_main_footer_container__1gPeQ\",\"total_count_container\":\"Stylesheet_total_count_container__oVZzX\",\"filter_buttons_container\":\"Stylesheet_filter_buttons_container__3awBb\"};","import React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nexport default function Header() {\r\n  return (\r\n    <Typography align=\"center\" display=\"initial\" variant=\"h3\" gutterBottom>\r\n      Todos\r\n    </Typography>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { IconButton, TextField } from \"@material-ui/core\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport styles from \"../style/Stylesheet.module.css\";\r\n\r\nexport default class FormComponent extends React.Component {\r\n\r\n  state = {\r\n    text: ''\r\n  };\r\n\r\n  onChangeTask = (event) => {\r\n    this.setState({\r\n      text: event.target.value\r\n    });\r\n  };\r\n\r\n  onSubmitTask = (event) => {\r\n    event.preventDefault();\r\n    this.props.onSubmit({\r\n      id: Date.now(),\r\n      taskName: this.state.text.trim(),\r\n      isComplete: false\r\n    })\r\n\r\n    this.setState({\r\n      text: ''\r\n    })\r\n  };\r\n\r\n\r\n  render() {\r\n    \r\n    return (\r\n      <form onSubmit={this.onSubmitTask} noValidate autoComplete=\"off\">\r\n        <div className={styles.form_container}>\r\n          <TextField\r\n            id=\"standard-full-width\"\r\n            fullWidth\r\n            label=\"Add new task\"\r\n            variant=\"outlined\"\r\n            value={this.state.text}\r\n            onChange={this.onChangeTask}\r\n            name=\"text\"\r\n            multiline={false}\r\n          />\r\n\r\n          <IconButton\r\n            onClick={this.onSubmitTask}\r\n            color=\"primary\"\r\n            disabled={false}\r\n          >\r\n            <SendIcon />\r\n          </IconButton>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Box, IconButton } from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport styles from \"../style/Stylesheet.module.css\";\r\n\r\nfunction TaskComponent(props) {\r\n\r\n  let completed = props.task.isComplete;\r\n\r\n  let buttonComponent = \"\"; \r\n  \r\n  if (completed === true) {\r\n    buttonComponent = (\r\n      <React.Fragment>\r\n        <Box></Box>\r\n        <Box>\r\n          <IconButton onClick={props.onDeleteButtonClicked} color=\"secondary\">\r\n            <DeleteIcon fontSize=\"small\" />\r\n          </IconButton>\r\n        </Box>\r\n      </React.Fragment>\r\n    );\r\n  } else {\r\n    buttonComponent = (\r\n      <React.Fragment>\r\n        <Box>\r\n          <IconButton onClick={props.onCompleteButtonClicked} color=\"primary\">\r\n            <CheckIcon fontSize=\"small\" />\r\n          </IconButton>\r\n        </Box>\r\n        <Box>\r\n          <IconButton onClick={props.onDeleteButtonClicked} color=\"secondary\">\r\n            <DeleteIcon fontSize=\"small\" />\r\n          </IconButton>\r\n        </Box>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  return (\r\n\r\n    <div className={styles.task_list_row}>\r\n      <Box p={0.5} m={1} display=\"flex\">\r\n        <Box flexGrow={1}>\r\n          <p className={styles.task_text}>{props.task.taskName}</p>\r\n        </Box>\r\n        {buttonComponent}\r\n      </Box>\r\n    </div>\r\n\r\n  );\r\n}\r\nexport default TaskComponent;\r\n","import React from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport styles from \"../style/Stylesheet.module.css\";\r\n\r\nfunction FooterComponent(props) {\r\n\r\n    let { currentFilterButton, onButtonFilter, tasks } = props;\r\n\r\n    return (\r\n        (\r\n            <div className={styles.main_footer_container}>\r\n                <div className={styles.total_count_container}>\r\n                    <p>ALL({tasks.length})</p>\r\n                </div>\r\n                <div className={styles.filter_buttons_container}>\r\n                    <Button\r\n                        size=\"medium\"\r\n                        variant=\"text\"\r\n                        color={\r\n                            currentFilterButton === \"all\" ? \"primary\" : \"default\"\r\n                        }\r\n                        onClick={() => onButtonFilter(\"all\")}\r\n                    >\r\n                        All\r\n                    </Button>\r\n\r\n                    <Button\r\n                        size=\"medium\"\r\n                        variant=\"text\"\r\n                        color={\r\n                            currentFilterButton === \"active\" ? \"primary\" : \"default\"\r\n                        }\r\n                        onClick={() => onButtonFilter(\"active\")}\r\n                    >\r\n                        Active\r\n                    </Button>\r\n\r\n                    <Button\r\n                        size=\"medium\"\r\n                        variant=\"text\"\r\n                        color={\r\n                            currentFilterButton === \"complete\" ? \"primary\" : \"default\"\r\n                        }\r\n                        onClick={() => onButtonFilter(\"complete\")}\r\n                    >\r\n                        Complete\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    );\r\n}\r\nexport default FooterComponent;","import React from \"react\";\r\nimport styles from \"../style/Stylesheet.module.css\";\r\nimport HeaderComponent from \"./HeaderComponent\";\r\nimport FormComponent from \"./FormComponent\";\r\nimport TaskComponent from \"./TaskComponent\";\r\nimport FooterComponent from \"./FooterComponent\";\r\n\r\nexport default class MainComponent extends React.Component {\r\n\r\n  state = {\r\n    tasks: [],\r\n    selectedButton: \"all\",\r\n    isTaskPresent: false,\r\n  };\r\n\r\n  addNewTask = (newTask) => {\r\n    if (newTask.taskName !== \"\") {\r\n      let isPresent = this.checkDuplicateTaskName(newTask.taskName);\r\n      if (isPresent) {\r\n        this.setState({\r\n          isTaskPresent: true,\r\n        });\r\n      } else {\r\n        this.setState({\r\n          tasks: [newTask, ...this.state.tasks],\r\n          isTaskPresent: false,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  checkDuplicateTaskName(newTaskName) {\r\n    const { tasks } = this.state;\r\n    let isPresent = false;\r\n    for (let taskName of tasks) {\r\n      if (taskName.taskName.toLowerCase() === newTaskName.toLowerCase()) {\r\n        isPresent = !isPresent;\r\n        break;\r\n      }\r\n    }\r\n    return isPresent;\r\n  }\r\n\r\n  onFilterButtonClicked = (newSelectedButton) => {\r\n    this.setState({\r\n      selectedButton: newSelectedButton,\r\n    });\r\n  };\r\n\r\n  onTaskCompleted = (id) => {\r\n    this.setState({\r\n      tasks: this.state.tasks.map((task) => {\r\n        if (task.id === id) {\r\n          return {\r\n            ...task,\r\n            isComplete: !task.isComplete,\r\n          };\r\n        } else {\r\n          return task;\r\n        }\r\n      }),\r\n    });\r\n  };\r\n\r\n  onTaskDeleted = (id) => {\r\n    this.setState({\r\n      tasks: this.state.tasks.filter((task) => task.id !== id),\r\n    });\r\n  };\r\n\r\n  render() {\r\n\r\n    let tasks = [];\r\n    const { selectedButton } = this.state;\r\n\r\n    if (selectedButton === \"all\") {\r\n      tasks = this.state.tasks;\r\n    } else if (selectedButton === \"active\") {\r\n      tasks = this.state.tasks.filter((task) => !task.isComplete);\r\n    } else if (selectedButton === \"complete\") {\r\n      tasks = this.state.tasks.filter((task) => task.isComplete);\r\n    }\r\n\r\n    let taskList = \"\";\r\n\r\n    if (tasks.length === 0) {\r\n      taskList = <div className={styles.error_message}>No data found.</div>;\r\n    } else {\r\n      taskList = tasks.map((task) => (\r\n        <TaskComponent\r\n          key={task.id}\r\n          task={task}\r\n          onCompleteButtonClicked={() => this.onTaskCompleted(task.id)}\r\n          onDeleteButtonClicked={() => this.onTaskDeleted(task.id)}\r\n        />\r\n      ));\r\n    }\r\n\r\n    let errorMessage = \"\";\r\n\r\n    if (this.state.isTaskPresent && tasks.length > 0) {\r\n      errorMessage = <div className={styles.error_message}>Task already exist!</div>;\r\n    } else {\r\n      errorMessage = \"\";\r\n    }\r\n\r\n    let footer = <FooterComponent currentFilterButton={this.state.selectedButton} tasks={this.state.tasks} onButtonFilter={this.onFilterButtonClicked} />;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <HeaderComponent />\r\n        <FormComponent onSubmit={this.addNewTask} />\r\n        <div className={styles.task_list_container}>\r\n          {errorMessage}\r\n          {taskList}\r\n          {footer}\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport MainComponent from './components/MainComponent'\n\nfunction App() {\n  return (\n    <div className=\"app_container\">\n      <MainComponent/>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}